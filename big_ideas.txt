lambda that houses debug level, then don't have to redeploy everytime I want to add debug

./run_tests at resources level in dir tree, it kicks off all ./run_tests in the resources themselves

can i do a pip install -U * and update everything? can i do that at the resource level?

    # ultimately, I'll need a service to validate who can see whose avails..
    # for now one can only see themselves
# these will be tagged as PODO for permissions todo


So, the next feature is a class, to contain tutors.
This comes before having students be able to search
for tutors because this will be the way we vet tutors.
This way, students in a certain class can have a list
of potential tutors to see, and those tutors get into
that list in a controlled fashion.

a class is a:
name,
teacher (user in charge),
list of students,
list of tutors

1) teacher makes a class
2a) teacher sends referral to student to be tutor
2b) student sends request to tutor to be tutor
2c) student sends request to join class
3) student can search for availability from a class (this is next feature)
    (for now, student goes to form page
              selects a class,
              sets some availability,
              search returns all availabilities,
    (this is instead of seeing a calendar, and
    I am avoiding the calendar because the potential for showing
    a bunch of different availbilities on the calendar)

    Do I really need to avoid this?
    I don't think so, lets try the algorithm
    input, a list of start and end times
    output, largest number of concurent availabilities
        this is as opposed to making availabilities shrink and grow as more concurency happens (outlook)

    Also, what about office hours style availabilities?
        same deal, so far at least

TODO
models:
    add class model - done
        id, name, teacher(user fk), list of students, list of tutors
    add to user model - done
        classes_as_student
        classes_as_tutor
    add a request model -done
        id, from(user fk), for(user fk), class(class fk), [student_request, student_refferal, tutor_request, tutor_referral], status

apis:
    post class - done
        given name, teacher
        save class as auto id, name, teacher
    get class - done
        given id
        returns name, teacher, id
        given user
        returns all classes and their relationship to user
    delete class - done
        given id, delete the class

    get class_search - .like sql alchemy query doc
        given name, searches for classes with that name
        returns list of matches

    post inquiry - done
        given fromUser, forUser, classId, status
        create inquiry

    put inquiry - done
        given id, updated inquiry status and/or denied (maybe deny or accept?) (maybe accepted is a status?)
        update inquiry
        this includes adding students and tutors to classes

    get inquiries - done
        given class
        all inquirys for that class
        given class user
        all inquirys for that user and that class
        given user
        all inquirys for user and all classes



    # TODO how can a teacher remove a student or tutor?



    I don't think the below are necessary
    get class returns list of student/tutor ids
    use those to get students/tutors as needed
    get tutor
        given class
        return all tutors in that class

    get students
        given class
        return all tutors in that class





ui
    add make class form - put under class tab for admin
        supply class name, and teacher in charge
            (I fill out this because I have admin (?))

    ** how to add students to classes or allow students to add to classes **
    users search for class to enroll in
    users receive a referral with a token, use the token to enroll in class
    search and request in addition to enroll? why not? it happens in the case of being a tutor
    why clip things early
    could probably have an interface defining this request/referral thing (here with students, and with tutors)

    soooo I need a tab for classes
        clicking on it shows all enrolled or tutoring or teaching classes
        class referrals
        class requests
        search for classes
    class view
        shows signed in user's inquiry status (none, requested, reffered for, enrolled in, tutoring, teaching)
        allows for requesting, referring, accepting request/ accepting refferal






TODO (maybe teachers can be list?? its not hard, this could help for like 7th grade science class, all 7th grade science teachers register their class and refer tutors for the pool)
https://stackoverflow.com/questions/7844460/foreign-key-to-multiple-tables
this is really useful if classes want to request to schools or schools want to refer classes
    maybe a class of generic 9th grade math tutors worldwide, and the school decides to allow that


for the python rest api stuff, it seems like get, put, and post, and delete are starting form patterns. For instance, I just noticed that put is always
    supply id, new attrs
    check auth
    fetch item, copy item attrs dict, remove immutable fields
    for each new attr, if in filtered item attrs dict, update
    update in db
except after thinking a smidge more, it turns out the put handler that inspired this thought is just taking in denied or accepted...



===========================================================================================================================================================

registration enhancements

ui
    sign up info page extended to include permission disclaimer
    registration form extended to include:
        username
        user email (optional)
        parent email (required)
        firstname
        lastname
        school
        grade
        bio
    profile extended to include parents email n stuff

backend
    can i send extra info to user registration?
    doesn't matter, use user lambda
    so,
        sign up/ register screen allows supply of profile attrs above, then I kick off cognito process AND AND
            save profile attrs.
        this leaves room for problems though
        problems being user provides invalid things , but cognito process is already kicked off
        so, I need to create user in my own database ... uh but this leaves room for cognito to fail (like invalid password)
            so, I must handle creation of user at pre sign up
                I just need to verify that this is safe from cognito perspective by passing in bad password and seeing if user gets saved
    all the ^^^ to say, upon sign up (not confirmation anymore) save user info

    uhhh I don't think I can pass random info to the pre signup lambda

    so, I must first initiate registration,
    then, create profile (post not put)
    then on post confirmation,email parent and child (if present) emails saying thanks for signing up!

...

    in conclusion
        I need to change user lambda
            get returns more stuff - done
            implement post - done
            allow put to update more stuff - done

        ~~I need to add a pre signup lambda that calls post user~~
            NO after calling amplify, call post lambda - this is more ui

        I need to change post confirmation lambda
            remove adding user to db - done
            send emails - done
                TODO still need to escape sandbox

models
    user will change to have more sheet - done


===========================================================================================================================================================


calendar thoughts:
Actually, just starting design for calendar, specifically, I'll include
* 30 minute blocks
* showing both individual calendar and multiperson calendar given class search request (just number of people for now)
* * changing calendar entry (instead of just create or delete)


30 minute blocks:
    currently: an availability is a start and end time, subjects (free form text) and a tutor (id)
    desired: start and end time that are on 30 minute boundaries, subjects that are from a list, and a tutor (id)
    delta:
    * send start and end times using new UI that only allows 30 minute boundary times (probably drop down)
    * * check in lambda handler that the start and end times are on 30 minute boundaries
    * choose one or more subjects from a list (hmm, in the db should this still be a free form string? could be comma separated, or could store with an entity relationship table)

showing both individual calendar and multiperson calendar
    currently: only url/my-calendar that shows a user their own availability. a day on the calendar is drawn as a button broken into divs alternating between grey (no avail) and red (avail). clicking grey will lead to create avail and clicking red will examine (and potentially delete) avail
    desired: url/calendar with subject search, each day is made up of 24 30 minute blocks. A block will list the number of tutors available at that time. no clicking for now (that will be with requests)
        url/my-calendar with 24 30 minute blocks. Each block is either blank or lists the subjects for that session. clicking blank will lead to create avail. clicking an avail will lead to edit or delete page (edit page with delete button).

tasks
    ~~add subjects table~~ add hard coded subjects list - done
        * do I have to do this? Why not just a free form string and have a hard coded list of options?
            * I need to:
                * add a subject to the list
                    * add it to hard coded options
                * remove a subject from the list
                    * remove it from the list
                    * find all avails with that subject, and (do something about it)
    ~~add subjects/avail many to many relationship~~
    change create avail lambda
        ~~subject stuff and~~ time boundary check - nawww
        make sure avails don't overlap and make sure not in the past - done
        make get avail take in time range - done
    change create avail ui
        * subject drop down - done
        * 30 min blocks - done
        * show error when creating overlapping avail - done
    change my-calendar
    make calendar - done


    so.. my calendar vs calendar
    should they be two different components??
        differences:
            query
                need to request based off time and subjects (calendar) instead of time and user (my calendar)
            display
                need to show number of potential tutors (calendar) instead of subjects (my calendar)
                when avail is selected, need to show list of tutors (calendar) vs delete avail (my calendar)
                when non-avail is selected, need to do nothing (calendar) vs show create avail screen (my calendar)

    so what does that look like?
    1) two pages/urls. The overall shape of calendar and fact that it contains days and days contain calendar time objects is the same. But, the calendar time objects are different (two sets, one for calendar and one for my calendar). Lastly, the queries are different. This will be interesting to see how the query code is duplicated and potentially refactored
        notes during investigation:
            even calendar day is different
            also, its easier to draw the calendar with 24 time slots
            for (avail_count_index = 0 and start = 12:00am and end = 12:30am; start < 11:59pm; start += 30min, end += 30min, ++avail_count_index) {
                for avail in avails:
                    if avail.start >= start && avail.start <= end or avail.end >= start && avail.end <= end or avail.start <= start && avail.end >= end # equals are gonna be messed up
                        avails[start][avail.id] = avail
            }

            for (avail_count in avail_counts) {
                if (avail_count > 0) {
                    button(
                }
            }



    how hard would it be to have 24 different time slots? - done
    well, its a hell of a lot easier than counting in the old way - done

    thoughts during creatino of calendar:
        will require receiving subjects and not user id in avail lambda - done
        can extract error handler
        can extract query

============================================================================================================================================

ok, looking over the last section, the biggest thing that remains is that my calendar and calendar look different and have entirely different
    code, despite possiblities for most of the code to be shared.

The solution I have is a pretty significant amount of rework, but I think it is still ideal.

That solution is that instead of several days each filling themselves up, a calendar fills itself up with time slots.
    This way, each time slot can be a ~~td~~ flex item?

    whoa, seems like I could probably also do it with a flexbox...
    but I'm gonna come back for that one,
    no I'm not doing that
    I'm doing it right

.Calendar {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content:  space-evenly;
    align-items: stretch; /* default, but equal spacing between all walls */
    align-content: space-evenly;
    width: 100%
    height: h px;
};

.TimeSlot {
    flex-grow: 1; /* extra space is distributed equally */
};

After trying, I don't think its possible to do with a flex box

Time to try it with a grid

.Calendar {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    grid-template-rows: repeat(49, 1fr);
    place-items: center; /* default is stretch, try both to see which is better */
    place-content: space-evenly;
};

/* probably better autogenerated in order to give rows and columns */
/* actually I might be able to just do auto for grid-column/row
.TimeSlot {
    grid-area: auto; /* shorthand for grid-column/row, which are shorthand for grid-column/row-start/end */
};



ok, so i have a calendar grid going, now I need to make the factories that take in start/end time and avails and produce the buttons
then I chop down the old code and solidify - done
then I can try to chop down the api code (maybe) - uhhhhhhh this sounds hard and will show no progress, gonna probs move on to showing select avail screen


==================================================================================================================================================================
Selected avail screen

summary:
When a time slot with > 0 avails is selected from calendar screen, move to a new screen (url is /select-availability?startTime=<startTime>&subject=<>) - done
        So, since the select avail page will also be parameterized, no need to not jump when 0 avails - done
    Ok, seems like url paramters are weird with react router. also, I've already done this with selected date, so I will just do it htat way (state or somethign) - done

the new screen shows all availabilities with overlapping the indicated time slot and with the indicated subject - done

each availability is a row that has basic info about the tutor as well as a request button - done
    (note that I am leaving this as just tutor username, and showing first or last name would result in some more queries to get user by username)

the request button has 4 statuses: can request, request send, request accepted, request denied
    this requires availability to have an additional field , oooh or maybe a whole 'nother table! something like a requests table - done
        requests table:
            from user:
            to availability:
            open, accepted, denied, or pending?: but, that status is actually a computation of all requests pointing to it, so avail needs a list a requests
                                                                    but, users have a list of requests.. not one but two! one for incoming one for outgoing
                                                                    holy shit
    Ok, what is the table like? each avail has one status? idk, I think its more like each user has many requests, and each request has one avail - yeah
        this is the alembic part i guess - done

    ^^ I guess that means we need an availability_request lambda too - done
        post availrequest, given user.cognito_id, avail id
            test - done
        get availrequest, given avail id
            test - done
        get availrequest, given from user id
            test - done
        get availrequest, given for user id
            test - done
        put availrequest, given availrequest id and status, (the rest are immutable)
            test - done
        delete availrequest, given availrequest id (from user must match the requestor)
            test - done

    in addition to the new table it will also take some logic to show/not show avails that are accepted for someone else, etc etc...
        specifically,
            * need to show status per avail on "my calendar"
                ** cdk add resource ?
                ** not doing for now
            * need to show only open or pending on "calendar"
                ** this requires sending requesting user in case they are "denied", see weird problem #2
                ** not doing for now


PAGINATION!!!!!

denied requests in count??
own user's avails in count?
can i make a request for a time that i am available? - no

when a user selects request on an open avail, it sends a notification to the tutor and updates status - done
    * user can select and cancel request - done
    * tutor receives notification of request received - done

avail requests need show up on profile - done
    * requests sent - done
    * requests received - done

tutor can accept or deny requests - done
    * from notificaiton
    * from profile - done

user receives notification upon request being accepted or denied - done
    * upon accept, contact info is exchanged to both
        * same email to both ?

clear cancelled requests from profile
add avail should (if possible) start at selected time

select part of an availability

web page should be grid that fills at least full screen but can stretch vertically to accomidate plenty of crap in the middle - TJTAG
    * use in all places
        * so there is a problem here, a lot of things take in classnames from props and those classnames can switch depending on whether its full screen or not
            Now that basescreen determines that, the specific screens can't pass those into their specific components
            the solution: have a single registry of classnames. fetch classnames based on screen size enum or something
            =-=
            ok, so that didnt' work, it appears media query must be a part of a component. So, maybe I make the components first, each (commonly used one) that can decide for itself
            so which are commonly used: - done (ScreenSizeConfigurable)
                so far only 2
                    * <hr className={props.underlineClass}/>
                    * <p className={props.textClass}>
                    * <p className={props.mainTextClass}>
                    * <img className={props.imgClass} src={course} alt="stock"/>


            =-=
            another option: pass in both classes to the class - NOPE!
    * revamp grid
    * revamp error stuff - TJTAG
    * revamp authed vs unauthed - done

~~~~~

so far, a lot of whats left above is notifications,
I want to create a design where each type of notification is a command. The notification client builds a command from a library, then says sendEmail(command)

well, what has to be there?
message body text for each
a way to generate to (maybe pass in avail request)

so..
createNotification(availRequest): # could also have two switch statements, one for build recipients, one for build body
    if status is 'DENIED':
        recipients = availRequest.fromUser.parentEmail, availRequest.fromUser.email
        body_html = 'tutor %s denied your request for %s subjects on %date'
    elif status is 'ACCEPTED':
        recipients = availRequest.fromUser.parentEmail, availRequest.fromUser.email, availRequest.forAvailability.tutor.parentEmail, availRequest.forAvailability.tutor.email
        body_html = 'dear student %s, tutor %s accepted your request for %s subjects on %date.  Here is your tutor's contact info: %s'
    elif status is 'REQUESTED':
        recipients = availRequest.forAvailability.tutor.parentEmail, availRequest.forAvailability.tutor.email
        body_html = 'dear tutor %s, student %s requested your availability for %s subjects on %date.  click <here> to accept or <here> to deny.  Also, all requests can be seen from you <profile page>'
    elif status is 'CANCELLED':
        recipients = availRequest.forAvailability.tutor.parentEmail, availRequest.forAvailability.tutor.email
        body_html = 'dear tutor %s, student %s cancelled their request for %s subjects on %date.'


now, how does the above "notificationCommand" change the existing send_notification?
it could be as simple as send_notification(recipients, body_html, body_text, subject) => send_notification(notification_command)
    then, recipients = notificaiton_command.get_recipients()
    then, body_html = notificaiton_command.get_body_html()
    then, body_text = notificaiton_command.get_body_text()


Another option....
a facade
NotificationFacade():
    send_avail_request_accepted_notification(avail_request):
    send_avail_request_denied_notification(avail_request):
    send_avail_request_reqeusted_notification(avail_request):
    send_avail_request_cancelled_notification(avail_request):

this could be the better option since the command is just an unneccessary middleman




another set of notifications would be reminders for ACCEPTED and REQEUSTED requests
these would need to run via a cron like thingy


(post api call to a notification service? or just a library like described above :/)


~~~~~

should probably show accepted tutoring session on both users' calendar
    - yep, and link to (visitor's) other profile

weird problem #1, can a request be pending by multiple people? if so, what happens when one is accepted? basically I would say that the rest get notified that the tutor has accepted another individual

weird problem #2, need to send requester with get avail calls in case denied. The best reason to have deny is for tutor to not get spammed. Could this be accomplished by having the user be able to block other users?
    one thing that could make this not a problem (cause even with denied users I realized that I have to send the requestor to check if they are banned) is that the requestor is sent in the token
        honestly, I probably need the block list, but that could be made unneccasry if the class functionality is utilized



====================================================================================================================================================================
Next time I do a model change, I need to write a script to update all packages, that was tooooo much man
====================================================================================================================================================================
